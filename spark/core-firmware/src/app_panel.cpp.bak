#include "application.h"
#include "_constants.h"
#include "_quadencoder.h"
#include "_button.h"
#include "_mytcp.h"

// ******************************
// Definitions
// ******************************
String COMPONENT_BTN1 = "1";
String COMPONENT_BTN2 = "2";
String COMPONENT_BTN3 = "3";
String COMPONENT_BTN4 = "4";
String COMPONENT_KNOB = "5";
String COMPONENT_SENSOR_TEMP = "6";
String COMPONENT_SENSOR_LIGHT = "7";
String COMPONENT_SENSOR_MOTION = "8";

// ******************************
// TCP Setup
// ******************************

TCPClient tcp;

char STX = '\x02';
char ETX = '\x03';
char EOT = '\x04';
char ENQ = '\x05';
char ACK = '\x06';
char BEL = '\x07';
int  tcpPort = 5000;
bool tcpReady = false;
long tcpTimeout = 5000;
long tcpSendLimit = 100;
byte tcpServer[4] = {0,0,0,0};
unsigned long now = millis();
unsigned long tcpTimer = millis();
unsigned long tcpSendTimer = millis();

// ******************************
// Core Setup
// ******************************

int btn0 = D2;
int btn1 = D3;
int btn2 = D4;
int btn3 = D5;
int btn4 = D6;

int btn0Val = LOW;
int btn1Val = LOW;
int btn2Val = LOW;
int btn3Val = LOW;
int btn4Val = LOW;

bool btn0Down = false;
bool btn1Down = false;
bool btn2Down = false;
bool btn3Down = false;
bool btn4Down = false;

int encVal = 0;
int encPin1 = D0;
int encPin2 = D1;

MyTCP mytcp();
QuadEncoder qe(encPin1, encPin2);
Button button0(btn0, INPUT_PULLDOWN);
Button button1(btn1, INPUT_PULLDOWN);

/*
Button button2(btn2, INPUT_PULLDOWN);
Button button3(btn3, INPUT_PULLDOWN);
Button button4(btn4, INPUT_PULLDOWN);
*/

int tcpStatus();
int tcpResetTimer();
int tcpIdentify();
int tcpConnect();
int tcpSetIP(String ip);
int tcpDisconnect(String param);
int tcpAction(String who, String what);
char tcpRead();
void ipArrayFromString(byte ipArray[], String ipString);

void setup()
{
    Serial.begin(9600);

    pinMode(btn0, INPUT_PULLDOWN);
    pinMode(btn1, INPUT_PULLDOWN);
    pinMode(btn2, INPUT_PULLDOWN);
    pinMode(btn3, INPUT_PULLDOWN);
    pinMode(btn4, INPUT_PULLDOWN);

    pinMode(encPin1, INPUT_PULLUP);
    pinMode(encPin2, INPUT_PULLUP);

    Spark.function("connect", tcpSetIP);
    Spark.function("disconnect", tcpDisconnect);
}

// ******************************
// Main Loop
// ******************************

void loop()
{

    now = millis();
    encVal  = qe.tick();
    btn0Val = digitalRead(btn0);
    btn1Val = digitalRead(btn1);
    btn2Val = digitalRead(btn2);
    btn3Val = digitalRead(btn3);
    btn4Val = digitalRead(btn4);

    tcpStatus();
    tcpRead();

    if (encVal == '>') {
        tcpAction(COMPONENT_KNOB, ACTION_CW);
    } else if (encVal == '<') {
        tcpAction(COMPONENT_KNOB, ACTION_CCW);
    }

    /*
    if (!btn0Down && btn0Val == HIGH) {
        btn0Down = true;
        tcpAction(COMPONENT_KNOB, ACTION_PRESS);
    } else if (btn0Val == LOW) {
        btn0Down = false;
    }

    if (!btn1Down && btn1Val == HIGH) {
        btn1Down = true;
        tcpAction(COMPONENT_BTN1, ACTION_PRESS);
    } else if (btn1Val == LOW) {
        btn1Down = false;
    }

    if (!btn2Down && btn2Val == HIGH) {
        btn2Down = true;
        tcpAction(COMPONENT_BTN2, ACTION_PRESS);
    } else if (btn2Val == LOW) {
        btn2Down = false;
    }

    if (!btn3Down && btn3Val == HIGH) {
        btn3Down = true;
        tcpAction(COMPONENT_BTN3, ACTION_PRESS);
    } else if (btn3Val == LOW) {
        btn3Down = false;
    }


    if (!btn4Down && btn4Val == HIGH) {
        btn4Down = true;
        tcpAction(COMPONENT_BTN4, ACTION_PRESS);
    } else if (btn4Val == LOW) {
        btn4Down = false;
    }
    */

    char b0 = button0.state();
    if (b0 == 'P') {
        tcpAction(COMPONENT_KNOB, ACTION_PRESS);
    } else if (b0 == 'H') {
        tcpAction(COMPONENT_KNOB, ACTION_HOLD);
    }

/*
    char b1 = button1.state();
    if (b1 == 'P') {
        tcpAction(COMPONENT_BTN1, ACTION_PRESS);
    } else if (b1 == 'H') {
        tcpAction(COMPONENT_BTN1, ACTION_HOLD);
    }

    char b2 = button2.state();
    if (b2 == 'P') {
        tcpAction(COMPONENT_BTN2, ACTION_PRESS);
    } else if (b2 == 'H') {
        tcpAction(COMPONENT_BTN2, ACTION_HOLD);
    }

    char b3 = button3.state();
    if (b3 == 'P') {
        tcpAction(COMPONENT_BTN3, ACTION_PRESS);
    } else if (b3 == 'H') {
        tcpAction(COMPONENT_BTN3, ACTION_HOLD);
    }

    char b4 = button4.state();
    if (b4 == 'P') {
        tcpAction(COMPONENT_BTN4, ACTION_PRESS);
    } else if (b4 == 'H') {
        tcpAction(COMPONENT_BTN4, ACTION_HOLD);
    }
*/



}


// ******************************
// TCP Connection & Communication
// ******************************

int tcpStatus() {

    if (tcp.connected() && (now > tcpTimer)) {
        tcpDisconnect("");
    }

    if (tcp.connected()) {
        // analogWrite(led, HIGH);
        return 1;
    } else {
        // analogWrite(led, LOW);
        return -1;
    }
}

int tcpResetTimer() {
    tcpTimer = now + tcpTimeout;
    return 1;
}

int tcpSetIP(String ip) {
    tcpReady = true;
    ipArrayFromString(tcpServer, ip);
    return tcpConnect();
}

int tcpIdentify() {
    return tcpAction(Spark.deviceID(), "0");
}

int tcpConnect() {
    if (tcp.connected()) {
        tcp.flush();
        tcp.stop();
    }
    if (tcpReady) {
        if (tcp.connect(tcpServer, tcpPort)) {
            tcpResetTimer();
            return 1;
        } else {
            return -1;
        }
    } else {
        return -1;
    }
}

int tcpDisconnect(String param) {
    tcp.flush();
    tcp.stop();
    return 1;
}

int tcpAction(String who, String what) {
    if (tcp.connected()) {
        tcpResetTimer();
        tcp.print(STX + who + ETX + what + EOT);
        delay(10);
        return 1;
    } else {
        return -1;
    }
}

char tcpRead() {
    if (tcp.available()) {
        tcpResetTimer();
        char read = tcp.read();
        if (read == ENQ) {
            tcp.print(ACK);
        } else if (read == BEL) {
            tcpIdentify();
        } else {
            return read;
        }
    }
    return EOT;
}

// ******************************
// Utility Methods
// ******************************

void ipArrayFromString(byte ipArray[], String ipString) {
  int dot1   = ipString.indexOf('.');
  ipArray[0] = ipString.substring(0, dot1).toInt();
  int dot2   = ipString.indexOf('.', dot1 + 1);
  ipArray[1] = ipString.substring(dot1 + 1, dot2).toInt();
  dot1       = ipString.indexOf('.', dot2 + 1);
  ipArray[2] = ipString.substring(dot2 + 1, dot1).toInt();
  ipArray[3] = ipString.substring(dot1 + 1).toInt();
}








